"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[528],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),l=s(n),f=a,d=l["".concat(u,".").concat(f)]||l[f]||m[f]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p[l]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4,slug:"/tutorial/input",title:"Input"},i="Input",p={unversionedId:"tutorial/input",id:"tutorial/input",title:"Input",description:"What are inputs?",source:"@site/docs/tutorial/input.md",sourceDirName:"tutorial",slug:"/tutorial/input",permalink:"/tutorial/input",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/input.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,slug:"/tutorial/input",title:"Input"},sidebar:"tutorialSidebar",previous:{title:"Plan",permalink:"/get-started/plan"},next:{title:"Run",permalink:"/tutorial/run"}},u={},s=[{value:"What are inputs?",id:"what-are-inputs",level:3},{value:"Generating A Configu Schema (Optional)",id:"generating-a-configu-schema-optional",level:3},{value:"Exporting Inputs",id:"exporting-inputs",level:3}],c={toc:s},l="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"input"},"Input"),(0,a.kt)("h3",{id:"what-are-inputs"},"What are inputs?"),(0,a.kt)("p",null,"Inputs are parameters that are required by actions in an action plan. Inputs can be viewed by inspecting the contents of the ",(0,a.kt)("inlineCode",{parentName:"p"},"trustacks.plan"),"."),(0,a.kt)("p",null,"ex. ",(0,a.kt)("inlineCode",{parentName:"p"},'{"actions":[...],"inputs":["CONTAINER_REGISTRY", ...]}')),(0,a.kt)("h3",{id:"generating-a-configu-schema-optional"},"Generating A Configu Schema (Optional)"),(0,a.kt)("p",null,"TruStacks supports ",(0,a.kt)("a",{parentName:"p",href:"https://configu.com/"},"Configu")," schemas for managing action inputs. "),(0,a.kt)("p",null,"To generate an input schema run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tsctl config init --from-plan trustacks.plan\n")),(0,a.kt)("p",null,"This command generates a ",(0,a.kt)("a",{parentName:"p",href:"https://configu.com/docs/config-schema/"},"ConfigSchema")," in the current directory named ",(0,a.kt)("inlineCode",{parentName:"p"},"trustacks.cfgu.json"),"."),(0,a.kt)("p",null,"Follow ",(0,a.kt)("a",{parentName:"p",href:"https://configu.com/docs/get-started/"},"this")," guide to configure your variables using your desired ",(0,a.kt)("a",{parentName:"p",href:"https://configu.com/docs/config-store/"},"ConfigStore"),". "),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"trustacks.cfgu.json")," schema file contains a description of the inputs for reference.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Make sure to use the name ",(0,a.kt)("inlineCode",{parentName:"p"},"trustacks")," for the desired ConfigStore in your .configu file like so:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "stores": {\n    "trustacks": {\n      "type": "<config-store-type>",\n      "configuration": { \n        ... \n      }\n    }\n  }\n}\n\n'))),(0,a.kt)("h3",{id:"exporting-inputs"},"Exporting Inputs"),(0,a.kt)("p",null,"Once you have ",(0,a.kt)("a",{parentName:"p",href:"https://configu.com/docs/commands/#upsert"},"upserted")," your config to your config store, run the following command to export your config as environment variables."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"for e in $(configu eval --store 'trustacks' --set '<config-set>' --schema ./trustacks.cfgu.json | configu export --format 'Dotenv'); do export $e; done\n")),(0,a.kt)("p",null,"This command will validate your configuration against the input schema and export each variable into the environment."))}m.isMDXComponent=!0}}]);