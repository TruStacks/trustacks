"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[585],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),o=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=o(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=o(n),k=a,d=p["".concat(u,".").concat(k)]||p[k]||m[k]||s;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=k;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var o=2;o<s;o++)i[o]=n[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},7669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var r=n(7462),a=(n(7294),n(3905));const s={title:"Kubernetes",slug:"/inputs/kubernetes"},i="Kubernetes Inputs",c={unversionedId:"stacks/inputs/kubernetes",id:"stacks/inputs/kubernetes",title:"Kubernetes",description:"Kubernetes inputs provide parameters for interacting with kubernetes clusters.",source:"@site/docs/stacks/inputs/kubernetes.md",sourceDirName:"stacks/inputs",slug:"/inputs/kubernetes",permalink:"/inputs/kubernetes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/stacks/inputs/kubernetes.md",tags:[],version:"current",frontMatter:{title:"Kubernetes",slug:"/inputs/kubernetes"},sidebar:"tutorialSidebar",previous:{title:"Container",permalink:"/inputs/container"}},u={},o=[{value:"Fields",id:"fields",level:2},{value:"Generating a kubeconfig",id:"generating-a-kubeconfig",level:2}],l={toc:o},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"kubernetes-inputs"},"Kubernetes Inputs"),(0,a.kt)("p",null,"Kubernetes inputs provide parameters for interacting with ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/"},"kubernetes")," clusters."),(0,a.kt)("h2",{id:"fields"},"Fields"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"KubernetesStagingKubeconfig"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"the kubeconfig file contents for kubernetes cluster used for staging the application. ",(0,a.kt)("em",{parentName:"td"},"See ",(0,a.kt)("a",{parentName:"em",href:"#generating-a-kubeconfig"},"above")," to create a compliant kubeconfig"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"KubernetesNamespace"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"the namespace in the kubernetes cluster where the application will be deployed.")))),(0,a.kt)("h2",{id:"generating-a-kubeconfig"},"Generating a kubeconfig"),(0,a.kt)("p",null,"TruStacks requires a ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/authentication/#x509-client-certs"},"client certifcate")," based kubernetes configuration. Use the following script to create one:"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The following script requires an existing kubernetes cluster and the ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl")," command line utility.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\ncontext="$1"\nuser="$2"\n\n# create an rsa key and certificate signing request.\nopenssl genrsa -out $user.key 2048\nopenssl req -new -key $user.key -out $user.csr -subj="/CN=$user"\n\n# create a certificate signing request resource in the kubernetes cluster.\ncat <<EOF | kubectl apply -f -\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: $user\nspec:\n  request: $(cat $user.csr | base64 | tr -d "\\n")\n  signerName: kubernetes.io/kube-apiserver-client\n  expirationSeconds: 86400\n  usages:\n  - client auth\nEOF\n\n# approve the csr and save the resulting certificate.\nkubectl certificate approve $user\nkubectl get csr $user -o jsonpath=\'{.status.certificate}\'| base64 -d > $user.crt\n\n# create the user cluster role binding.\nkubectl create clusterrolebinding $user-cluster-admin --clusterrole=cluster-admin --user=$user --dry-run=client -o yaml | kubectl apply -f -\n\n# collect the cluster details from the desired cluster context.\ncluster_template="{{range \\$context := .contexts}}{{if eq .name \\"$context\\"}}{{.context.cluster}}{{end}}{{end}}"\ncluster=$(kubectl config view --flatten --template="$cluster_template")\ncluster_server_template="{{range \\$cluster := .clusters}}{{if eq .name \\"$cluster\\"}}{{.cluster.server}}{{end}}{{end}}"\ncluster_server=$(kubectl config view --flatten --template="$cluster_server_template")\ncluster_certificate_authority_data_template="{{range \\$cluster := .clusters}}{{if eq .name \\"$cluster\\"}}{{.cluster.server}}{{end}}{{end}}"\ncluster_certificate_authority_data=$(kubectl config view --flatten --template="$cluster_certificate_authority_data_template")\n\n# create the kubeconfig.\nexport KUBECONFIG=/tmp/trustacks-$user-kubeconfig\ntouch $KUBECONFIG\nkubectl config set-cluster $cluster --server=$cluster_server\nkubectl config set-credentials $user --client-key=$user.key --client-certificate=$user.crt --embed-certs=true\nkubectl config set-context $context --cluster=$cluster --user=$user\nkubectl config use-context $context\nkubectl config view --flatten > $context-$user-kubeconfig.yaml\necho "KUBECONFIG created at $context-$user-kubeconfig.yaml"\n\n# clean up script artifacts.\nrm $KUBECONFIG $user.key $user.csr $user.crt\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"context"),"(first argument) must come be an existing context in your kubeconfig. "),(0,a.kt)("p",{parentName:"admonition"},"Run the following command to view your existing contexts: "),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"kubectl config get-contexts\n")),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"user"),"(second argument) argument is the user that will be added to kubeconfig. The user requires no pre-existing service account or user in the kubernetes cluster.")))}m.isMDXComponent=!0}}]);